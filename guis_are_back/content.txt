


A LOOONG time ago for yours truly, I had started looking into using Python to write some scripts that I had figured at the time might require something with a little more oomph than what Bash could provide without some effort. I remember using Perl for scripts like this but there was something about Perl that never sat well with me.

I was also using Java to write desktop apps. Swing made it (relatively) easy to do compared to C++. As I was getting more and more familiar with Python, I went looking around to see if there was a GUI platform that one could use with it. To my surprise, I found a number of them. There was PyGTK, PyQT, wxPython and Tkinter.

I thought the wxPython was pretty cool as you were able to create GUIs that looked like the ones from C++ Visual Studio (from back in the day). PyGTK was promising but at the time there was not much in the way of documentation. PyQT was pretty much the same way (though it's C++ documentation has always been decent). 

There was not a lot of documentation for Tkinter to be honest except for whatever Frederik Lundh would contribute on his website. I eventually bought a very expensive Manning book called Python and Tkinter Programming by John Grayson. It was published in 2000. I think I got my hands on it somewhere around 2005 or so. I found that while it had some quirks of its own (the GUI looked a little rough out of the box), it was pretty much considered the defacto Python GUI toolkit.

If you'll remember (or maybe you don't because you're a lot younger than I am), back in the day, GUIs could be put together quickly with a RAD enabled IDE. So, you could use the old JCreator, JBuilder, Visual Studio or even Delphi to drag and drop widgets onto forms and have the boileplate code dynamically created. It was a snap then to add functional code to give these apps life and they were very fun to play around with.

What I found with Tkinter, unlike any other GUI platform, was that it was actually easier and more logical to write the full code for than it was to use a RAD tool to build it. To give you an idea of what I'm talking about, have a look at this code:

```python
#!/usr/bin/env python

from tkinter import Tk, Button


if __name__ == '__main__':

    root = Tk()
    root.title = 'Hello World from Tkinter!'

    button = Button(
        root, text='Greet!',
        command=lambda: print(
            'Hello world from Tkinter!'
        )
    )

    button.pack()
    root.mainloop()
```

This is about as simple as it gets. We're doing straight procedural Python here. We could make this a little more oop by changing our code to this:

```python
#!/usr/bin/env python

from tkinter import Tk, Button


class SimpleApp(object):

    def __init__(self):
        self.root = Tk()
        self.build()

    def greet(self):
        print('Hello world from Tkinter!')

    def build(self):
        self.root.title = 'Hello World from Tkinter'

        button = Button(
            self.root,
            text='Greet!',
            command=self.greet
        )
        button.pack()

    def run(self):
        self.root.mainloop()


if __name__ == '__main__':

    app = SimpleApp()
    app.run()

```

