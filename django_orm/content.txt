

Throughout this article on Django ORM queries, we'll set up our demo as it's shown in the following code figures.

First, we'll want to set up a Django project. My example is called ormdemo. You can build it like this:

```
$ cd [your projects or sandbox directory]
$ django-admin.py startproject ormdemo
$ cd ormdemo
$ ./manage.py startapp demoapp
$ cd demoapp
```

For reference, your ormdemo project should look like:

```
├── demoapp
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── manage.py
├── ormdemo
   ├── __init__.py
   ├── settings.py
   ├── urls.py
   └── wsgi.py
```

Here is our Car model. We want to put this in models.py:

```python
from datetime import datetime
from django.db import models


class Car(models.Model):

    cmake = models.CharField('Make', max_length=30)
    cmodel = models.CharField('Model', max_length=30)
    trim = models.CharField('Trim', max_length=30)
    year = models.PositiveSmallIntegerField(
        'Year',
    )
    price = models.DecimalField(max_digits=8, decimal_places=2)

    def __str__(self):
        return f'{self.year} {self.cmake} {self.cmodel} {self.trim}'

```

Add the following to the admin.py file in the demoapp directory:

```python
from django.contrib import admin
from .models import Car


admin.site.register(Car)
```

Now, we're ready to build our database. We'll keep this simple and use the sqlite3 db that comes ready to go out of the box with Django:

```
$ ./manage.py makemigrations demoapp
$ ./manage.py migrate
$ ./manage.py createsuperuser
$ ./manage.py runserver
```

With Django running you should be able to access the admin at http://localhost:8000/admin (you will log in with the admin user you created with ./manage.py createsuperuser).

You should see under Demoapp the Car model. You can click Add to add a new car just so you can see how the admin part works but I am including a script that will add a number of cars -- actually cars I have owned over the years :-).

Here is the script. You can put this in the project directory, call it add_cars.py, make it executable if you're on Linux ($ chmod +x add_cars.py) and run it:

```python
#!/usr/bin/env python

import os
import sys
import django


sys.path.append('.')
os.environ['DJANGO_SETTINGS_MODULE'] = 'ormdemo.settings'
django.setup()

from demoapp.models import Car

if __name__ == '__main__':

    car_list = [
        {
            'cmake': 'Hyundai',
            'cmodel': 'Excel',
            'trim': 'SE',
            'year': 1989,
            'price': 2000.00,
        },
        {
            'cmake': 'Hyundai',
            'cmodel': 'Excel',
            'trim': 'SE',
            'year': 1987,
            'price': 1500.00,
        },
        {
            'cmake': 'Pontiac',
            'cmodel': 'Sunbird',
            'trim': 'SE',
            'year': 1994,
            'price': 12000.00,
        },
        {
            'cmake': 'Pontiac',
            'cmodel': 'Grand AM',
            'trim': 'LX',
            'year': 1996,
            'price': 14500.00,
        },
        {
            'cmake': 'Hyundai',
            'cmodel': 'Excel',
            'trim': 'SE',
            'year': 1990,
            'price': 1200.00,
        },
        {
            'cmake': 'Mercury',
            'cmodel': 'Villager',
            'trim': 'LS',
            'year': 2003,
            'price': 11000.00,
        },
        {
            'cmake': 'Ford',
            'cmodel': 'Focus',
            'trim': 'S',
            'year': 2004,
            'price': 10000.00,
        },
        {
            'cmake': 'Honda',
            'cmodel': 'Accord',
            'trim': 'EX-L V6',
            'year': 2001,
            'price': 6500.00,
        },
        {
            'cmake': 'Toyota',
            'cmodel': 'Tacoma',
            'trim': 'TRD',
            'year': 2004,
            'price': 25000.00,
        },
        {
            'cmake': 'Jeep',
            'cmodel': 'Cherokee',
            'trim': 'Overland',
            'year': 2005,
            'price': 6500.00,
        },
        {
            'cmake': 'Toyota',
            'cmodel': '4Runner',
            'trim': 'SR5',
            'year': 2001,
            'price': 8000.00,
        },
    ]

    for car in car_list:
        c = Car()
        for k, v in car.items():
            setattr(c, k, v)
        print(f'Adding {c} ...')
        c.save()

    print('Done.')

```

It will create the cars in your database. You can look back at http://localhost:8000/admin to verify if you like. With the cars in the database we can start on some queries so that you can understand how to do this more easily.

From the command line in the project directory, open a shell into our Django environment by typing:

```
$ ./manage.py shell
Python 3.6.3 (default, Oct  3 2017, 19:25:54) 
[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> 
```

The shell invoked by the manage.py will already have sourced the current path and the ormdemo/settings.py module. We will however need to import the Car model so we can work with it:

```
>>> from demoapp.models import Car
```

Let's do a very simple query by requesting all cars in the Car table:

```
>>> car_list = Car.objects.all()
```

We can see that the result as car_list is of type QuerySet. This is a special type that is very similar to a list:

```
>>> print(type(car_list))
<class 'django.db.models.query.QuerySet'>
```

Natuarally then, we should be able to use a for loop or list comprehension to iterate through the results.

```
>>> print([car for car in car_list])
[<Car: 1989 Hyundai Excel SE>, <Car: 1987 Hyundai Excel SE>, <Car: 1994 Pontiac Sunbird SE>, <Car: 1996 Pontiac Grand AM LX>, <Car: 1990 Hyundai Excel SE>, <Car: 2003 Mercury Villager LS>, <Car: 2004 Ford Focus S>, <Car: 2001 Honda Accord EX-L V6>, <Car: 2004 Toyota Tacoma TRD>, <Car: 2005 Jeep Cherokee Overland>, <Car: 2001 Toyota 4Runner SR5>]
```

We can limit our list by using the filter method:

```
>>> car_list = Car.objects.filter(cmake='Hyundai')
>>> for car in car_list:
...     print(car)
... 
1989 Hyundai Excel SE
1987 Hyundai Excel SE
1990 Hyundai Excel SE
```

We can use multiple qualifiers also:

```
>>> car_list = Car.objects.filter(cmake='Hyundai', year=1990)
>>> for car in car_list:
...     print(car)
... 
1990 Hyundai Excel SE
```

You may be tempted to use sorted() function on the QuerySet object but there's already a built in sort with .order_by() like so:

```
>>> for car in Car.objects.all().order_by('year'): print(car.year, car.cmake)
... 
1987 Hyundai
1989 Hyundai
1990 Hyundai
1994 Pontiac
1996 Pontiac
2001 Honda
2001 Toyota
2003 Mercury
2004 Ford
2004 Toyota
2005 Jeep
```

Need it in reverse? We can use the special prepend to the sorted key with "-":

```
>>> for car in Car.objects.all().order_by('-year'): print(car.year, car.cmake)
... 
2005 Jeep
2004 Ford
2004 Toyota
2003 Mercury
2001 Honda
2001 Toyota
1996 Pontiac
1994 Pontiac
1990 Hyundai
1989 Hyundai
1987 Hyundai
```

We can also do order_by with multiple keys like: .order_by('-year', 'cmake').

Note that in both cases above, filter() will produce a queryset which is an iterator.

If we wanted to pull only one car from the Car table we could use a qualifier with the get method:

```
>>> my_car = Car.objects.get(cmodel='4Runner')
>>> print(my_car)
2001 Toyota 4Runner SR5
>>> print(type(my_car))
<class 'demoapp.models.Car'>
```

We can further narrow down our results with multiple qualifiers like we did when we used filter():

```
>>> Car.objects.get(cmake='Hyundai', year=1990)
<Car: 1990 Hyundai Excel SE>
```

If we were to use get() in such a way that it returns more than one result, we'll get an error:

```
>>> my_car = Car.objects.get(cmodel='Excel')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/hseritt/.pyenv/versions/django-orm/lib/python3.6/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/hseritt/.pyenv/versions/django-orm/lib/python3.6/site-packages/django/db/models/query.py", line 384, in get
    (self.model._meta.object_name, num)
demoapp.models.MultipleObjectsReturned: get() returned more than one Car -- it returned 3!
```

So, be careful with get(). If it's possible you will get more than one result, use filter().

We have some functionality that behaves like comparison expressions. If you are familiar with SQL, you may be tempted to think you could use >, >=, <= and < but there are some special variables that can be used instead:

Wrong:

```
>>> Car.objects.filter(year > 1990)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'year' is not defined
```

Correct:

```
>>> Car.objects.filter(year__gt=1990)
<QuerySet [<Car: 1994 Pontiac Sunbird SE>, <Car: 1996 Pontiac Grand AM LX>, <Car: 2003 Mercury Villager LS>, <Car: 2004 Ford Focus S>, <Car: 2001 Honda Accord EX-L V6>, <Car: 2004 Toyota Tacoma TRD>, <Car: 2005 Jeep Cherokee Overland>, <Car: 2001 Toyota 4Runner SR5>]>
```

This is also correct:

```
>>> Car.objects.filter(year__lt=1990)
<QuerySet [<Car: 1989 Hyundai Excel SE>, <Car: 1987 Hyundai Excel SE>]>
```

You can also append __gte (>=) and __lte (<=) to get similar results.



We 

Queries

=
>
<
>=
<=
or
and
order_by
